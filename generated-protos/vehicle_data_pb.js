// source: vehicle_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.yorkfs.dashboard.APPSData', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.APPSData.APPSState', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.BMSData', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.BMSData.ShutdownReason', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.BMSSegmentData', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.CANMessage', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.DashboardCommand', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.DashboardCommand.CommandPayloadCase', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.DashboardCommand.CommandType', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.InverterData', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.InverterData.FaultCode', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.InverterData.InverterLimitStates', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.TelemetryPacket', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.TelemetryPacket.DataType', null, global);
goog.exportSymbol('proto.yorkfs.dashboard.TelemetryPacket.PayloadCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.APPSData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yorkfs.dashboard.APPSData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.APPSData.displayName = 'proto.yorkfs.dashboard.APPSData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.BMSSegmentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yorkfs.dashboard.BMSSegmentData.repeatedFields_, null);
};
goog.inherits(proto.yorkfs.dashboard.BMSSegmentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.BMSSegmentData.displayName = 'proto.yorkfs.dashboard.BMSSegmentData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.BMSData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.yorkfs.dashboard.BMSData.repeatedFields_, null);
};
goog.inherits(proto.yorkfs.dashboard.BMSData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.BMSData.displayName = 'proto.yorkfs.dashboard.BMSData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.InverterData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yorkfs.dashboard.InverterData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.InverterData.displayName = 'proto.yorkfs.dashboard.InverterData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yorkfs.dashboard.InverterData.InverterLimitStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.InverterData.InverterLimitStates.displayName = 'proto.yorkfs.dashboard.InverterData.InverterLimitStates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.TelemetryPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_);
};
goog.inherits(proto.yorkfs.dashboard.TelemetryPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.TelemetryPacket.displayName = 'proto.yorkfs.dashboard.TelemetryPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.CANMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.yorkfs.dashboard.CANMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.CANMessage.displayName = 'proto.yorkfs.dashboard.CANMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.yorkfs.dashboard.DashboardCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yorkfs.dashboard.DashboardCommand.oneofGroups_);
};
goog.inherits(proto.yorkfs.dashboard.DashboardCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.yorkfs.dashboard.DashboardCommand.displayName = 'proto.yorkfs.dashboard.DashboardCommand';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.APPSData.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.APPSData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.APPSData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.APPSData.toObject = function(includeInstance, msg) {
  var f, obj = {
state: jspb.Message.getFieldWithDefault(msg, 1, 0),
currentThrottlePercentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
currentMotorCurrent: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
currentMotorRpm: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.APPSData}
 */
proto.yorkfs.dashboard.APPSData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.APPSData;
  return proto.yorkfs.dashboard.APPSData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.APPSData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.APPSData}
 */
proto.yorkfs.dashboard.APPSData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yorkfs.dashboard.APPSData.APPSState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentThrottlePercentage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentMotorCurrent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentMotorRpm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.APPSData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.APPSData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.APPSData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.APPSData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCurrentThrottlePercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getCurrentMotorCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCurrentMotorRpm();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.yorkfs.dashboard.APPSData.APPSState = {
  APPS_STATE_UNSPECIFIED: 0,
  APPS_STATE_INVERTER_MISMATCH: 1,
  APPS_STATE_SENSOR_ERROR: 2,
  APPS_STATE_UNCALIBRATED: 3,
  APPS_STATE_CALIBRATING: 4,
  APPS_STATE_CALIBRATION_HOLD: 5,
  APPS_STATE_RUNNING: 6
};

/**
 * optional APPSState state = 1;
 * @return {!proto.yorkfs.dashboard.APPSData.APPSState}
 */
proto.yorkfs.dashboard.APPSData.prototype.getState = function() {
  return /** @type {!proto.yorkfs.dashboard.APPSData.APPSState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yorkfs.dashboard.APPSData.APPSState} value
 * @return {!proto.yorkfs.dashboard.APPSData} returns this
 */
proto.yorkfs.dashboard.APPSData.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float current_throttle_percentage = 2;
 * @return {number}
 */
proto.yorkfs.dashboard.APPSData.prototype.getCurrentThrottlePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.APPSData} returns this
 */
proto.yorkfs.dashboard.APPSData.prototype.setCurrentThrottlePercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float current_motor_current = 3;
 * @return {number}
 */
proto.yorkfs.dashboard.APPSData.prototype.getCurrentMotorCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.APPSData} returns this
 */
proto.yorkfs.dashboard.APPSData.prototype.setCurrentMotorCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 current_motor_rpm = 4;
 * @return {number}
 */
proto.yorkfs.dashboard.APPSData.prototype.getCurrentMotorRpm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.APPSData} returns this
 */
proto.yorkfs.dashboard.APPSData.prototype.setCurrentMotorRpm = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yorkfs.dashboard.BMSSegmentData.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.BMSSegmentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.BMSSegmentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.BMSSegmentData.toObject = function(includeInstance, msg) {
  var f, obj = {
buckConverterRailVoltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
connectedCellTapBitset: jspb.Message.getFieldWithDefault(msg, 2, 0),
degradedCellTapBitset: jspb.Message.getFieldWithDefault(msg, 3, 0),
connectedThermistorBitset: jspb.Message.getFieldWithDefault(msg, 4, 0),
cellVoltagesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
temperaturesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.BMSSegmentData}
 */
proto.yorkfs.dashboard.BMSSegmentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.BMSSegmentData;
  return proto.yorkfs.dashboard.BMSSegmentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.BMSSegmentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.BMSSegmentData}
 */
proto.yorkfs.dashboard.BMSSegmentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuckConverterRailVoltage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedCellTapBitset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDegradedCellTapBitset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedThermistorBitset(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCellVoltages(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTemperatures(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.BMSSegmentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.BMSSegmentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.BMSSegmentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuckConverterRailVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getConnectedCellTapBitset();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDegradedCellTapBitset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getConnectedThermistorBitset();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCellVoltagesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getTemperaturesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
};


/**
 * optional float buck_converter_rail_voltage = 1;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getBuckConverterRailVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setBuckConverterRailVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional uint32 connected_cell_tap_bitset = 2;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getConnectedCellTapBitset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setConnectedCellTapBitset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 degraded_cell_tap_bitset = 3;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getDegradedCellTapBitset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setDegradedCellTapBitset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 connected_thermistor_bitset = 4;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getConnectedThermistorBitset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setConnectedThermistorBitset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated float cell_voltages = 5;
 * @return {!Array<number>}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getCellVoltagesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setCellVoltagesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.addCellVoltages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.clearCellVoltagesList = function() {
  return this.setCellVoltagesList([]);
};


/**
 * repeated float temperatures = 6;
 * @return {!Array<number>}
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.getTemperaturesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.setTemperaturesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.addTemperatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yorkfs.dashboard.BMSSegmentData} returns this
 */
proto.yorkfs.dashboard.BMSSegmentData.prototype.clearTemperaturesList = function() {
  return this.setTemperaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.yorkfs.dashboard.BMSData.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.BMSData.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.BMSData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.BMSData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.BMSData.toObject = function(includeInstance, msg) {
  var f, obj = {
shutdownActivated: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
shutdownReason: jspb.Message.getFieldWithDefault(msg, 2, 0),
measuredLvs12vRail: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
positiveCurrent: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
negativeCurrent: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.yorkfs.dashboard.BMSSegmentData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.BMSData}
 */
proto.yorkfs.dashboard.BMSData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.BMSData;
  return proto.yorkfs.dashboard.BMSData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.BMSData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.BMSData}
 */
proto.yorkfs.dashboard.BMSData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShutdownActivated(value);
      break;
    case 2:
      var value = /** @type {!proto.yorkfs.dashboard.BMSData.ShutdownReason} */ (reader.readEnum());
      msg.setShutdownReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeasuredLvs12vRail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPositiveCurrent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegativeCurrent(value);
      break;
    case 6:
      var value = new proto.yorkfs.dashboard.BMSSegmentData;
      reader.readMessage(value,proto.yorkfs.dashboard.BMSSegmentData.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.BMSData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.BMSData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.BMSData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.BMSData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShutdownActivated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getShutdownReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMeasuredLvs12vRail();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPositiveCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getNegativeCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.yorkfs.dashboard.BMSSegmentData.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.yorkfs.dashboard.BMSData.ShutdownReason = {
  SHUTDOWN_REASON_UNSPECIFIED: 0,
  SHUTDOWN_REASON_OVERCURRENT: 1,
  SHUTDOWN_REASON_OVERTEMPERATURE: 2,
  SHUTDOWN_REASON_UNDERVOLTAGE: 3,
  SHUTDOWN_REASON_OVERVOLTAGE: 4
};

/**
 * optional bool shutdown_activated = 1;
 * @return {boolean}
 */
proto.yorkfs.dashboard.BMSData.prototype.getShutdownActivated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.setShutdownActivated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ShutdownReason shutdown_reason = 2;
 * @return {!proto.yorkfs.dashboard.BMSData.ShutdownReason}
 */
proto.yorkfs.dashboard.BMSData.prototype.getShutdownReason = function() {
  return /** @type {!proto.yorkfs.dashboard.BMSData.ShutdownReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.yorkfs.dashboard.BMSData.ShutdownReason} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.setShutdownReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float measured_lvs_12v_rail = 3;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSData.prototype.getMeasuredLvs12vRail = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.setMeasuredLvs12vRail = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float positive_current = 4;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSData.prototype.getPositiveCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.setPositiveCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float negative_current = 5;
 * @return {number}
 */
proto.yorkfs.dashboard.BMSData.prototype.getNegativeCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.setNegativeCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated BMSSegmentData segments = 6;
 * @return {!Array<!proto.yorkfs.dashboard.BMSSegmentData>}
 */
proto.yorkfs.dashboard.BMSData.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.yorkfs.dashboard.BMSSegmentData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.yorkfs.dashboard.BMSSegmentData, 6));
};


/**
 * @param {!Array<!proto.yorkfs.dashboard.BMSSegmentData>} value
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
*/
proto.yorkfs.dashboard.BMSData.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.yorkfs.dashboard.BMSSegmentData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.yorkfs.dashboard.BMSSegmentData}
 */
proto.yorkfs.dashboard.BMSData.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.yorkfs.dashboard.BMSSegmentData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.yorkfs.dashboard.BMSData} returns this
 */
proto.yorkfs.dashboard.BMSData.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.InverterData.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.InverterData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.InverterData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.InverterData.toObject = function(includeInstance, msg) {
  var f, obj = {
faultCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
erpm: jspb.Message.getFieldWithDefault(msg, 2, 0),
dutyCycle: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
inputDcVoltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
acMotorCurrent: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
dcBatteryCurrent: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
controllerTemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
motorTemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
driveEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
limitStates: (f = msg.getLimitStates()) && proto.yorkfs.dashboard.InverterData.InverterLimitStates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.InverterData}
 */
proto.yorkfs.dashboard.InverterData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.InverterData;
  return proto.yorkfs.dashboard.InverterData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.InverterData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.InverterData}
 */
proto.yorkfs.dashboard.InverterData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yorkfs.dashboard.InverterData.FaultCode} */ (reader.readEnum());
      msg.setFaultCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErpm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDutyCycle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInputDcVoltage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcMotorCurrent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcBatteryCurrent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setControllerTemperature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMotorTemperature(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDriveEnabled(value);
      break;
    case 10:
      var value = new proto.yorkfs.dashboard.InverterData.InverterLimitStates;
      reader.readMessage(value,proto.yorkfs.dashboard.InverterData.InverterLimitStates.deserializeBinaryFromReader);
      msg.setLimitStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.InverterData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.InverterData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.InverterData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.InverterData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaultCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErpm();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDutyCycle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getInputDcVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAcMotorCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getDcBatteryCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getControllerTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMotorTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getDriveEnabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getLimitStates();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.yorkfs.dashboard.InverterData.InverterLimitStates.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.yorkfs.dashboard.InverterData.FaultCode = {
  FAULT_CODE_UNSPECIFIED: 0,
  FAULT_CODE_NO_FAULTS: 1,
  FAULT_CODE_OVERVOLTAGE: 2,
  FAULT_CODE_UNDERVOLTAGE: 3,
  FAULT_CODE_DRIVE_ERROR: 4,
  FAULT_CODE_OVERCURRENT: 5,
  FAULT_CODE_CONTROLLER_OVERTEMPERATURE: 6,
  FAULT_CODE_MOTOR_OVERTEMPERATURE: 7,
  FAULT_CODE_SENSOR_WIRE_FAULT: 8,
  FAULT_CODE_SENSOR_GENERAL_FAULT: 9,
  FAULT_CODE_CAN_ERROR: 10,
  FAULT_CODE_ANALOG_INPUT_ERROR: 11
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.InverterData.InverterLimitStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.toObject = function(includeInstance, msg) {
  var f, obj = {
capacitorTemperature: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
dcCurrentLimit: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
driveEnableLimit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
igbtAccelerationLimit: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
igbtTemperatureLimit: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
inputVoltageLimit: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
motorAccelerationTemperatureLimit: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
motorTemperatureLimit: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
rpmMinimumLimit: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
rpmMaximumLimit: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
powerLimit: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.InverterData.InverterLimitStates;
  return proto.yorkfs.dashboard.InverterData.InverterLimitStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCapacitorTemperature(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDcCurrentLimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDriveEnableLimit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgbtAccelerationLimit(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgbtTemperatureLimit(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInputVoltageLimit(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotorAccelerationTemperatureLimit(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotorTemperatureLimit(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRpmMinimumLimit(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRpmMaximumLimit(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPowerLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.InverterData.InverterLimitStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCapacitorTemperature();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDcCurrentLimit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDriveEnableLimit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIgbtAccelerationLimit();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIgbtTemperatureLimit();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getInputVoltageLimit();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMotorAccelerationTemperatureLimit();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMotorTemperatureLimit();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRpmMinimumLimit();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getRpmMaximumLimit();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getPowerLimit();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional bool capacitor_temperature = 1;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getCapacitorTemperature = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setCapacitorTemperature = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool dc_current_limit = 2;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getDcCurrentLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setDcCurrentLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool drive_enable_limit = 3;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getDriveEnableLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setDriveEnableLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool igbt_acceleration_limit = 4;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getIgbtAccelerationLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setIgbtAccelerationLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool igbt_temperature_limit = 5;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getIgbtTemperatureLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setIgbtTemperatureLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool input_voltage_limit = 6;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getInputVoltageLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setInputVoltageLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool motor_acceleration_temperature_limit = 7;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getMotorAccelerationTemperatureLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setMotorAccelerationTemperatureLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool motor_temperature_limit = 8;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getMotorTemperatureLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setMotorTemperatureLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool rpm_minimum_limit = 9;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getRpmMinimumLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setRpmMinimumLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool rpm_maximum_limit = 10;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getRpmMaximumLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setRpmMaximumLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool power_limit = 11;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.getPowerLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData.InverterLimitStates} returns this
 */
proto.yorkfs.dashboard.InverterData.InverterLimitStates.prototype.setPowerLimit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional FaultCode fault_code = 1;
 * @return {!proto.yorkfs.dashboard.InverterData.FaultCode}
 */
proto.yorkfs.dashboard.InverterData.prototype.getFaultCode = function() {
  return /** @type {!proto.yorkfs.dashboard.InverterData.FaultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yorkfs.dashboard.InverterData.FaultCode} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setFaultCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 erpm = 2;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getErpm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setErpm = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float duty_cycle = 3;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getDutyCycle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setDutyCycle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float input_dc_voltage = 4;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getInputDcVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setInputDcVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float ac_motor_current = 5;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getAcMotorCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setAcMotorCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float dc_battery_current = 6;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getDcBatteryCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setDcBatteryCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float controller_temperature = 7;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getControllerTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setControllerTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float motor_temperature = 8;
 * @return {number}
 */
proto.yorkfs.dashboard.InverterData.prototype.getMotorTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setMotorTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional bool drive_enabled = 9;
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.prototype.getDriveEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.setDriveEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional InverterLimitStates limit_states = 10;
 * @return {?proto.yorkfs.dashboard.InverterData.InverterLimitStates}
 */
proto.yorkfs.dashboard.InverterData.prototype.getLimitStates = function() {
  return /** @type{?proto.yorkfs.dashboard.InverterData.InverterLimitStates} */ (
    jspb.Message.getWrapperField(this, proto.yorkfs.dashboard.InverterData.InverterLimitStates, 10));
};


/**
 * @param {?proto.yorkfs.dashboard.InverterData.InverterLimitStates|undefined} value
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
*/
proto.yorkfs.dashboard.InverterData.prototype.setLimitStates = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yorkfs.dashboard.InverterData} returns this
 */
proto.yorkfs.dashboard.InverterData.prototype.clearLimitStates = function() {
  return this.setLimitStates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yorkfs.dashboard.InverterData.prototype.hasLimitStates = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.yorkfs.dashboard.TelemetryPacket.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  APPS_DATA: 3,
  BMS_DATA: 4,
  INVERTER_DATA: 5
};

/**
 * @return {proto.yorkfs.dashboard.TelemetryPacket.PayloadCase}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getPayloadCase = function() {
  return /** @type {proto.yorkfs.dashboard.TelemetryPacket.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.TelemetryPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.TelemetryPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.TelemetryPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
timestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
appsData: (f = msg.getAppsData()) && proto.yorkfs.dashboard.APPSData.toObject(includeInstance, f),
bmsData: (f = msg.getBmsData()) && proto.yorkfs.dashboard.BMSData.toObject(includeInstance, f),
inverterData: (f = msg.getInverterData()) && proto.yorkfs.dashboard.InverterData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.TelemetryPacket}
 */
proto.yorkfs.dashboard.TelemetryPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.TelemetryPacket;
  return proto.yorkfs.dashboard.TelemetryPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.TelemetryPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.TelemetryPacket}
 */
proto.yorkfs.dashboard.TelemetryPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yorkfs.dashboard.TelemetryPacket.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampMs(value);
      break;
    case 3:
      var value = new proto.yorkfs.dashboard.APPSData;
      reader.readMessage(value,proto.yorkfs.dashboard.APPSData.deserializeBinaryFromReader);
      msg.setAppsData(value);
      break;
    case 4:
      var value = new proto.yorkfs.dashboard.BMSData;
      reader.readMessage(value,proto.yorkfs.dashboard.BMSData.deserializeBinaryFromReader);
      msg.setBmsData(value);
      break;
    case 5:
      var value = new proto.yorkfs.dashboard.InverterData;
      reader.readMessage(value,proto.yorkfs.dashboard.InverterData.deserializeBinaryFromReader);
      msg.setInverterData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.TelemetryPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.TelemetryPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.TelemetryPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimestampMs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAppsData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.yorkfs.dashboard.APPSData.serializeBinaryToWriter
    );
  }
  f = message.getBmsData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.yorkfs.dashboard.BMSData.serializeBinaryToWriter
    );
  }
  f = message.getInverterData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.yorkfs.dashboard.InverterData.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.yorkfs.dashboard.TelemetryPacket.DataType = {
  DATA_TYPE_UNSPECIFIED: 0,
  DATA_TYPE_APPS: 1,
  DATA_TYPE_BMS: 2,
  DATA_TYPE_INVERTER: 3
};

/**
 * optional DataType type = 1;
 * @return {!proto.yorkfs.dashboard.TelemetryPacket.DataType}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getType = function() {
  return /** @type {!proto.yorkfs.dashboard.TelemetryPacket.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yorkfs.dashboard.TelemetryPacket.DataType} value
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 timestamp_ms = 2;
 * @return {number}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.setTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional APPSData apps_data = 3;
 * @return {?proto.yorkfs.dashboard.APPSData}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getAppsData = function() {
  return /** @type{?proto.yorkfs.dashboard.APPSData} */ (
    jspb.Message.getWrapperField(this, proto.yorkfs.dashboard.APPSData, 3));
};


/**
 * @param {?proto.yorkfs.dashboard.APPSData|undefined} value
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
*/
proto.yorkfs.dashboard.TelemetryPacket.prototype.setAppsData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.clearAppsData = function() {
  return this.setAppsData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.hasAppsData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BMSData bms_data = 4;
 * @return {?proto.yorkfs.dashboard.BMSData}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getBmsData = function() {
  return /** @type{?proto.yorkfs.dashboard.BMSData} */ (
    jspb.Message.getWrapperField(this, proto.yorkfs.dashboard.BMSData, 4));
};


/**
 * @param {?proto.yorkfs.dashboard.BMSData|undefined} value
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
*/
proto.yorkfs.dashboard.TelemetryPacket.prototype.setBmsData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.clearBmsData = function() {
  return this.setBmsData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.hasBmsData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InverterData inverter_data = 5;
 * @return {?proto.yorkfs.dashboard.InverterData}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.getInverterData = function() {
  return /** @type{?proto.yorkfs.dashboard.InverterData} */ (
    jspb.Message.getWrapperField(this, proto.yorkfs.dashboard.InverterData, 5));
};


/**
 * @param {?proto.yorkfs.dashboard.InverterData|undefined} value
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
*/
proto.yorkfs.dashboard.TelemetryPacket.prototype.setInverterData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.yorkfs.dashboard.TelemetryPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yorkfs.dashboard.TelemetryPacket} returns this
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.clearInverterData = function() {
  return this.setInverterData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yorkfs.dashboard.TelemetryPacket.prototype.hasInverterData = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.CANMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.CANMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.CANMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.CANMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
data: msg.getData_asB64(),
isExtendedId: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
isRtr: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.CANMessage}
 */
proto.yorkfs.dashboard.CANMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.CANMessage;
  return proto.yorkfs.dashboard.CANMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.CANMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.CANMessage}
 */
proto.yorkfs.dashboard.CANMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExtendedId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRtr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.CANMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.CANMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.CANMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.CANMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIsExtendedId();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsRtr();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.CANMessage} returns this
 */
proto.yorkfs.dashboard.CANMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.yorkfs.dashboard.CANMessage} returns this
 */
proto.yorkfs.dashboard.CANMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool is_extended_id = 3;
 * @return {boolean}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getIsExtendedId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.CANMessage} returns this
 */
proto.yorkfs.dashboard.CANMessage.prototype.setIsExtendedId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_rtr = 4;
 * @return {boolean}
 */
proto.yorkfs.dashboard.CANMessage.prototype.getIsRtr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.yorkfs.dashboard.CANMessage} returns this
 */
proto.yorkfs.dashboard.CANMessage.prototype.setIsRtr = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.yorkfs.dashboard.DashboardCommand.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.yorkfs.dashboard.DashboardCommand.CommandPayloadCase = {
  COMMAND_PAYLOAD_NOT_SET: 0,
  CAN_TO_SEND: 3
};

/**
 * @return {proto.yorkfs.dashboard.DashboardCommand.CommandPayloadCase}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.getCommandPayloadCase = function() {
  return /** @type {proto.yorkfs.dashboard.DashboardCommand.CommandPayloadCase} */(jspb.Message.computeOneofCase(this, proto.yorkfs.dashboard.DashboardCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.yorkfs.dashboard.DashboardCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.yorkfs.dashboard.DashboardCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.DashboardCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
commandTimestampMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
canToSend: (f = msg.getCanToSend()) && proto.yorkfs.dashboard.CANMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.yorkfs.dashboard.DashboardCommand}
 */
proto.yorkfs.dashboard.DashboardCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.yorkfs.dashboard.DashboardCommand;
  return proto.yorkfs.dashboard.DashboardCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.yorkfs.dashboard.DashboardCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.yorkfs.dashboard.DashboardCommand}
 */
proto.yorkfs.dashboard.DashboardCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.yorkfs.dashboard.DashboardCommand.CommandType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCommandTimestampMs(value);
      break;
    case 3:
      var value = new proto.yorkfs.dashboard.CANMessage;
      reader.readMessage(value,proto.yorkfs.dashboard.CANMessage.deserializeBinaryFromReader);
      msg.setCanToSend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.yorkfs.dashboard.DashboardCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.yorkfs.dashboard.DashboardCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.yorkfs.dashboard.DashboardCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCommandTimestampMs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCanToSend();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.yorkfs.dashboard.CANMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.yorkfs.dashboard.DashboardCommand.CommandType = {
  COMMAND_TYPE_UNSPECIFIED: 0,
  COMMAND_TYPE_SEND_CAN_MESSAGE: 1
};

/**
 * optional CommandType type = 1;
 * @return {!proto.yorkfs.dashboard.DashboardCommand.CommandType}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.getType = function() {
  return /** @type {!proto.yorkfs.dashboard.DashboardCommand.CommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.yorkfs.dashboard.DashboardCommand.CommandType} value
 * @return {!proto.yorkfs.dashboard.DashboardCommand} returns this
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 command_timestamp_ms = 2;
 * @return {number}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.getCommandTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.yorkfs.dashboard.DashboardCommand} returns this
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.setCommandTimestampMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CANMessage can_to_send = 3;
 * @return {?proto.yorkfs.dashboard.CANMessage}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.getCanToSend = function() {
  return /** @type{?proto.yorkfs.dashboard.CANMessage} */ (
    jspb.Message.getWrapperField(this, proto.yorkfs.dashboard.CANMessage, 3));
};


/**
 * @param {?proto.yorkfs.dashboard.CANMessage|undefined} value
 * @return {!proto.yorkfs.dashboard.DashboardCommand} returns this
*/
proto.yorkfs.dashboard.DashboardCommand.prototype.setCanToSend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.yorkfs.dashboard.DashboardCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.yorkfs.dashboard.DashboardCommand} returns this
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.clearCanToSend = function() {
  return this.setCanToSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.yorkfs.dashboard.DashboardCommand.prototype.hasCanToSend = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.yorkfs.dashboard);
