syntax = "proto3";

package yorkfs.dashboard;

// ===================================================================
// Acceleration Pedal Position Sensor (APPS) Data
// ===================================================================
message APPSData {
  enum APPSState {
    APPS_STATE_UNSPECIFIED = 0; // Default enum value must be 0
    APPS_STATE_INVERTER_MISMATCH = 1;
    APPS_STATE_SENSOR_ERROR = 2;
    APPS_STATE_UNCALIBRATED = 3;
    APPS_STATE_CALIBRATING = 4;
    APPS_STATE_CALIBRATION_HOLD = 5;
    APPS_STATE_RUNNING = 6;
  }

  APPSState state = 1;
  float current_throttle_percentage = 2; // Expressed as 0.0 to 1.0
  float current_motor_current = 3;       // In Amperes
  uint32 current_motor_rpm = 4;          // Revolutions Per Minute
}

// ===================================================================
// Battery Management System (BMS) Data
// ===================================================================
message BMSSegmentData {
  // 3V3 Buck Converter Rail Voltage
  // Stored as millivolts to maintain precision if needed, or float for Volts.
  // requirements.md: 100 uV resolution.
  float buck_converter_rail_voltage = 1; // In Volts

  // Bitsets: store as uint32, interpret bits in JavaScript
  uint32 connected_cell_tap_bitset = 2;   // 12 bits relevant; LSB = cell 1
  uint32 degraded_cell_tap_bitset = 3;    // 12 bits relevant; LSB = cell 1
  uint32 connected_thermistor_bitset = 4; // 23 bits relevant; LSB = thermistor 1

  // 12x cell voltages
  // requirements.md: 100 uV resolution. Stored as Volts.
  repeated float cell_voltages = 5; // In Volts, should have 12 entries if all taps connected

  // 23x temperatures
  // requirements.md: 1c resolution. First 3 are onboard thermistors near balancers.
  repeated float temperatures = 6; // In Celsius, should have 23 entries if all thermistors connected
}

message BMSData {
  enum ShutdownReason {
    SHUTDOWN_REASON_UNSPECIFIED = 0;
    SHUTDOWN_REASON_OVERCURRENT = 1;
    SHUTDOWN_REASON_OVERTEMPERATURE = 2;
    SHUTDOWN_REASON_UNDERVOLTAGE = 3;
    SHUTDOWN_REASON_OVERVOLTAGE = 4;
  }

  bool shutdown_activated = 1;
  ShutdownReason shutdown_reason = 2;
  float measured_lvs_12v_rail = 3; // In Volts
  float positive_current = 4;      // In Amperes
  float negative_current = 5;      // In Amperes

  // Data for up to 10 segments
  repeated BMSSegmentData segments = 6;
}

// ===================================================================
// Inverter Data
// ===================================================================
message InverterData {
  enum FaultCode {
    FAULT_CODE_UNSPECIFIED = 0;
    FAULT_CODE_NO_FAULTS = 1;
    FAULT_CODE_OVERVOLTAGE = 2;
    FAULT_CODE_UNDERVOLTAGE = 3;
    FAULT_CODE_DRIVE_ERROR = 4;
    FAULT_CODE_OVERCURRENT = 5;
    FAULT_CODE_CONTROLLER_OVERTEMPERATURE = 6;
    FAULT_CODE_MOTOR_OVERTEMPERATURE = 7;
    FAULT_CODE_SENSOR_WIRE_FAULT = 8;
    FAULT_CODE_SENSOR_GENERAL_FAULT = 9;
    FAULT_CODE_CAN_ERROR = 10;
    FAULT_CODE_ANALOG_INPUT_ERROR = 11; // "shouldn't ever happen"
  }

  message InverterLimitStates {
    bool capacitor_temperature = 1;
    bool dc_current_limit = 2;
    bool drive_enable_limit = 3;
    bool igbt_acceleration_limit = 4;
    bool igbt_temperature_limit = 5;
    bool input_voltage_limit = 6;
    bool motor_acceleration_temperature_limit = 7;
    bool motor_temperature_limit = 8;
    bool rpm_minimum_limit = 9;
    bool rpm_maximum_limit = 10;
    bool power_limit = 11;
  }

  FaultCode fault_code = 1;
  uint32 erpm = 2;                           // Electrical RPM
  float duty_cycle = 3;                      // Expressed as 0.0 to 1.0
  float input_dc_voltage = 4;                // In Volts
  float ac_motor_current = 5;                // In Amperes
  float dc_battery_current = 6;              // In Amperes
  float controller_temperature = 7;          // In Celsius
  float motor_temperature = 8;               // In Celsius
  bool drive_enabled = 9;
  InverterLimitStates limit_states = 10;
}

// ===================================================================
// Top-Level Telemetry Packet (Envelope Message)
// ===================================================================
message TelemetryPacket {
  enum DataType {
    DATA_TYPE_UNSPECIFIED = 0;
    DATA_TYPE_APPS = 1;
    DATA_TYPE_BMS = 2;
    DATA_TYPE_INVERTER = 3;
    // DATA_TYPE_CAN_COMMAND_REQUEST = 4; // Example if sending commands
    // DATA_TYPE_CAN_COMMAND_RESPONSE = 5;
  }

  DataType type = 1;
  uint64 timestamp_ms = 2; // Milliseconds since UNIX epoch, UTC

  oneof payload {
    APPSData apps_data = 3;
    BMSData bms_data = 4;
    InverterData inverter_data = 5;
  }
}

// ===================================================================
// Optional: CAN Message Definition (if dashboard sends/receives raw CAN)
// As per original README, dashboard could send CAN messages.
// This would be a different message type, not part of the TelemetryPacket's oneof payload for telemetry.
// Or it could be, if telemetry stream also reports CAN messages.
// For now, defining separately.
// ===================================================================

message CANMessage {
  uint32 id = 1;       // CAN ID
  bytes data = 2;      // Up to 8 bytes of data
  bool is_extended_id = 3;
  bool is_rtr = 4;       // Remote Transmission Request
  // uint64 received_timestamp_ms = 5; // Optional: if logging received CAN
}

// If commands are sent from dashboard, e.g., to transmit a CAN message:
message DashboardCommand {
  enum CommandType {
    COMMAND_TYPE_UNSPECIFIED = 0;
    COMMAND_TYPE_SEND_CAN_MESSAGE = 1;
  }
  CommandType type = 1;
  uint64 command_timestamp_ms = 2;

  oneof command_payload {
    CANMessage can_to_send = 3;
  }
} 